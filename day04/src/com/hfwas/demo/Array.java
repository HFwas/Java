package com.hfwas.demo;

/**
 * @Author: HFwas
 * @Date: 2020/12/9
 * @Description: 数组
 * @version: 1.0
 */
public class Array {
    /*
        数组：是一种容器，可以同时存放多个数据值
        特点：
            1.数组是一种引用数据类型
            2.数组当中的多个数据，类型必须统一
            3.数组的长度再程序运行期间不可改变
        两种常见的初始化方法：
            1.动态初始化（指定长度）
            2。静态初始化
            动态初始化数组的格式：
                数据类型[] 数组名称 = new int[数组长度];
            解析含义：
                1.左侧数据类型：也就是数组当中保存的数据，全都是同意的什么类型
                2.左侧的中括号，代表我是一个数组
                3.左侧数组名称，给数组取一个名称
                4.右侧的new，戴白哦创建数组的动作
                5.右侧数据类型，必须和左边的数据类型保持一致
                6。右侧中括号的长度：也就是数组当中，到底可以保存多少个数据，是一个int数字
            静态初始化：
                格式：
                    基本格式:
                        数据类型[] 数组名称 = new 数据类型[]{元素1,元素2，，，，，};
                    省略格式：
                        数据类型[] 数组名称 = {元素1,元素2,元素三,,,,};
        注意事项：
            1.虽然静态初始化没有直接告诉数组长度，但是根据大括号里面的元素的具体内容也能推出数组长度
            2.静态初始化没有直接指定长度，但是仍然会自动推算得到长度
            3.动态初始化也可以拆分成两个步骤
            4.静态初始化一旦使用省略格式，就不能拆分成两个步骤了

            数组的输出:
                直接打印数组得到的是：内存地址哈希值
     */
    public static void main(String[] args) {
        //创建一个数组，保存三百个int数字
        int[] num = new int[300];

        //创建一个存放double类型的数组
        double[] num1 = new double[20];

        //创建一个数组，存放string类型
        String[] str = new String[20];

        //静态初始化
        int[] num2 = new int[]{1,2,3,4};
        String[] str2 = new String[]{"he","dd","fff","dad"};

        //动态初始化也可以拆分成两个步骤
        int[] num3;
        num3 = new int[5];

        //静态初始化不能拆分成两个步骤
        int[] num4;
//        num4 = {1,2,3};//错误写法

        //数组元素获取
        System.out.println(num3);//[I@1b6d3586


    }

}
